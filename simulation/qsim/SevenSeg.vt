// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/10/2020 07:14:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	clk,
	Clk_Reset,
	sampler_tx
);
input  clk;
input  Clk_Reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or Clk_Reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	Reset_sec,
	seg1_A,
	seg1_B,
	seg1_C,
	seg1_D,
	seg1_E,
	seg1_F,
	seg1_G,
	seg1_P,
	seg2_A,
	seg2_B,
	seg2_C,
	seg2_D,
	seg2_E,
	seg2_F,
	seg2_G,
	seg2_P,
	seg3_A,
	seg3_B,
	seg3_C,
	seg3_D,
	seg3_E,
	seg3_F,
	seg3_G,
	seg3_P,
	sampler_rx
);
input  Reset_sec;
input  seg1_A;
input  seg1_B;
input  seg1_C;
input  seg1_D;
input  seg1_E;
input  seg1_F;
input  seg1_G;
input  seg1_P;
input  seg2_A;
input  seg2_B;
input  seg2_C;
input  seg2_D;
input  seg2_E;
input  seg2_F;
input  seg2_G;
input  seg2_P;
input  seg3_A;
input  seg3_B;
input  seg3_C;
input  seg3_D;
input  seg3_E;
input  seg3_F;
input  seg3_G;
input  seg3_P;
input sampler_rx;

reg  Reset_sec_expected;
reg  seg1_A_expected;
reg  seg1_B_expected;
reg  seg1_C_expected;
reg  seg1_D_expected;
reg  seg1_E_expected;
reg  seg1_F_expected;
reg  seg1_G_expected;
reg  seg1_P_expected;
reg  seg2_A_expected;
reg  seg2_B_expected;
reg  seg2_C_expected;
reg  seg2_D_expected;
reg  seg2_E_expected;
reg  seg2_F_expected;
reg  seg2_G_expected;
reg  seg2_P_expected;
reg  seg3_A_expected;
reg  seg3_B_expected;
reg  seg3_C_expected;
reg  seg3_D_expected;
reg  seg3_E_expected;
reg  seg3_F_expected;
reg  seg3_G_expected;
reg  seg3_P_expected;

reg  Reset_sec_prev;
reg  seg1_A_prev;
reg  seg1_B_prev;
reg  seg1_C_prev;
reg  seg1_D_prev;
reg  seg1_E_prev;
reg  seg1_F_prev;
reg  seg1_G_prev;
reg  seg1_P_prev;
reg  seg2_A_prev;
reg  seg2_B_prev;
reg  seg2_C_prev;
reg  seg2_D_prev;
reg  seg2_E_prev;
reg  seg2_F_prev;
reg  seg2_G_prev;
reg  seg2_P_prev;
reg  seg3_A_prev;
reg  seg3_B_prev;
reg  seg3_C_prev;
reg  seg3_D_prev;
reg  seg3_E_prev;
reg  seg3_F_prev;
reg  seg3_G_prev;
reg  seg3_P_prev;

reg  Reset_sec_expected_prev;
reg  seg1_A_expected_prev;
reg  seg1_B_expected_prev;
reg  seg1_C_expected_prev;
reg  seg1_D_expected_prev;
reg  seg1_E_expected_prev;
reg  seg1_F_expected_prev;
reg  seg1_G_expected_prev;
reg  seg1_P_expected_prev;
reg  seg2_A_expected_prev;
reg  seg2_B_expected_prev;
reg  seg2_C_expected_prev;
reg  seg2_D_expected_prev;
reg  seg2_E_expected_prev;
reg  seg2_F_expected_prev;
reg  seg2_G_expected_prev;
reg  seg2_P_expected_prev;
reg  seg3_A_expected_prev;
reg  seg3_B_expected_prev;
reg  seg3_C_expected_prev;
reg  seg3_D_expected_prev;
reg  seg3_E_expected_prev;
reg  seg3_F_expected_prev;
reg  seg3_G_expected_prev;
reg  seg3_P_expected_prev;

reg  last_Reset_sec_exp;
reg  last_seg1_A_exp;
reg  last_seg1_B_exp;
reg  last_seg1_C_exp;
reg  last_seg1_D_exp;
reg  last_seg1_E_exp;
reg  last_seg1_F_exp;
reg  last_seg1_G_exp;
reg  last_seg1_P_exp;
reg  last_seg2_A_exp;
reg  last_seg2_B_exp;
reg  last_seg2_C_exp;
reg  last_seg2_D_exp;
reg  last_seg2_E_exp;
reg  last_seg2_F_exp;
reg  last_seg2_G_exp;
reg  last_seg2_P_exp;
reg  last_seg3_A_exp;
reg  last_seg3_B_exp;
reg  last_seg3_C_exp;
reg  last_seg3_D_exp;
reg  last_seg3_E_exp;
reg  last_seg3_F_exp;
reg  last_seg3_G_exp;
reg  last_seg3_P_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:25] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 25'b1;
end

// update real /o prevs

always @(trigger)
begin
	Reset_sec_prev = Reset_sec;
	seg1_A_prev = seg1_A;
	seg1_B_prev = seg1_B;
	seg1_C_prev = seg1_C;
	seg1_D_prev = seg1_D;
	seg1_E_prev = seg1_E;
	seg1_F_prev = seg1_F;
	seg1_G_prev = seg1_G;
	seg1_P_prev = seg1_P;
	seg2_A_prev = seg2_A;
	seg2_B_prev = seg2_B;
	seg2_C_prev = seg2_C;
	seg2_D_prev = seg2_D;
	seg2_E_prev = seg2_E;
	seg2_F_prev = seg2_F;
	seg2_G_prev = seg2_G;
	seg2_P_prev = seg2_P;
	seg3_A_prev = seg3_A;
	seg3_B_prev = seg3_B;
	seg3_C_prev = seg3_C;
	seg3_D_prev = seg3_D;
	seg3_E_prev = seg3_E;
	seg3_F_prev = seg3_F;
	seg3_G_prev = seg3_G;
	seg3_P_prev = seg3_P;
end

// update expected /o prevs

always @(trigger)
begin
	Reset_sec_expected_prev = Reset_sec_expected;
	seg1_A_expected_prev = seg1_A_expected;
	seg1_B_expected_prev = seg1_B_expected;
	seg1_C_expected_prev = seg1_C_expected;
	seg1_D_expected_prev = seg1_D_expected;
	seg1_E_expected_prev = seg1_E_expected;
	seg1_F_expected_prev = seg1_F_expected;
	seg1_G_expected_prev = seg1_G_expected;
	seg1_P_expected_prev = seg1_P_expected;
	seg2_A_expected_prev = seg2_A_expected;
	seg2_B_expected_prev = seg2_B_expected;
	seg2_C_expected_prev = seg2_C_expected;
	seg2_D_expected_prev = seg2_D_expected;
	seg2_E_expected_prev = seg2_E_expected;
	seg2_F_expected_prev = seg2_F_expected;
	seg2_G_expected_prev = seg2_G_expected;
	seg2_P_expected_prev = seg2_P_expected;
	seg3_A_expected_prev = seg3_A_expected;
	seg3_B_expected_prev = seg3_B_expected;
	seg3_C_expected_prev = seg3_C_expected;
	seg3_D_expected_prev = seg3_D_expected;
	seg3_E_expected_prev = seg3_E_expected;
	seg3_F_expected_prev = seg3_F_expected;
	seg3_G_expected_prev = seg3_G_expected;
	seg3_P_expected_prev = seg3_P_expected;
end



// expected seg1_P
initial
begin
	seg1_P_expected = 1'bX;
end 

// expected Reset_sec
initial
begin
	Reset_sec_expected = 1'b1;
end 

// expected seg1_A
initial
begin
	seg1_A_expected = 1'bX;
end 

// expected seg1_B
initial
begin
	seg1_B_expected = 1'bX;
end 

// expected seg1_C
initial
begin
	seg1_C_expected = 1'bX;
end 

// expected seg1_D
initial
begin
	seg1_D_expected = 1'bX;
end 

// expected seg1_E
initial
begin
	seg1_E_expected = 1'bX;
end 

// expected seg1_F
initial
begin
	seg1_F_expected = 1'bX;
end 

// expected seg1_G
initial
begin
	seg1_G_expected = 1'bX;
end 

// expected seg2_A
initial
begin
	seg2_A_expected = 1'bX;
end 

// expected seg2_B
initial
begin
	seg2_B_expected = 1'bX;
end 

// expected seg2_C
initial
begin
	seg2_C_expected = 1'bX;
end 

// expected seg2_D
initial
begin
	seg2_D_expected = 1'bX;
end 

// expected seg2_E
initial
begin
	seg2_E_expected = 1'bX;
end 

// expected seg2_F
initial
begin
	seg2_F_expected = 1'bX;
end 

// expected seg2_G
initial
begin
	seg2_G_expected = 1'bX;
end 

// expected seg2_P
initial
begin
	seg2_P_expected = 1'bX;
end 

// expected seg3_A
initial
begin
	seg3_A_expected = 1'bX;
end 

// expected seg3_B
initial
begin
	seg3_B_expected = 1'bX;
end 

// expected seg3_C
initial
begin
	seg3_C_expected = 1'bX;
end 

// expected seg3_D
initial
begin
	seg3_D_expected = 1'bX;
end 

// expected seg3_E
initial
begin
	seg3_E_expected = 1'bX;
end 

// expected seg3_F
initial
begin
	seg3_F_expected = 1'bX;
end 

// expected seg3_G
initial
begin
	seg3_G_expected = 1'bX;
end 

// expected seg3_P
initial
begin
	seg3_P_expected = 1'bX;
end 
// generate trigger
always @(Reset_sec_expected or Reset_sec or seg1_A_expected or seg1_A or seg1_B_expected or seg1_B or seg1_C_expected or seg1_C or seg1_D_expected or seg1_D or seg1_E_expected or seg1_E or seg1_F_expected or seg1_F or seg1_G_expected or seg1_G or seg1_P_expected or seg1_P or seg2_A_expected or seg2_A or seg2_B_expected or seg2_B or seg2_C_expected or seg2_C or seg2_D_expected or seg2_D or seg2_E_expected or seg2_E or seg2_F_expected or seg2_F or seg2_G_expected or seg2_G or seg2_P_expected or seg2_P or seg3_A_expected or seg3_A or seg3_B_expected or seg3_B or seg3_C_expected or seg3_C or seg3_D_expected or seg3_D or seg3_E_expected or seg3_E or seg3_F_expected or seg3_F or seg3_G_expected or seg3_G or seg3_P_expected or seg3_P)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Reset_sec = %b | expected seg1_A = %b | expected seg1_B = %b | expected seg1_C = %b | expected seg1_D = %b | expected seg1_E = %b | expected seg1_F = %b | expected seg1_G = %b | expected seg1_P = %b | expected seg2_A = %b | expected seg2_B = %b | expected seg2_C = %b | expected seg2_D = %b | expected seg2_E = %b | expected seg2_F = %b | expected seg2_G = %b | expected seg2_P = %b | expected seg3_A = %b | expected seg3_B = %b | expected seg3_C = %b | expected seg3_D = %b | expected seg3_E = %b | expected seg3_F = %b | expected seg3_G = %b | expected seg3_P = %b | ",Reset_sec_expected_prev,seg1_A_expected_prev,seg1_B_expected_prev,seg1_C_expected_prev,seg1_D_expected_prev,seg1_E_expected_prev,seg1_F_expected_prev,seg1_G_expected_prev,seg1_P_expected_prev,seg2_A_expected_prev,seg2_B_expected_prev,seg2_C_expected_prev,seg2_D_expected_prev,seg2_E_expected_prev,seg2_F_expected_prev,seg2_G_expected_prev,seg2_P_expected_prev,seg3_A_expected_prev,seg3_B_expected_prev,seg3_C_expected_prev,seg3_D_expected_prev,seg3_E_expected_prev,seg3_F_expected_prev,seg3_G_expected_prev,seg3_P_expected_prev);
	$display("| real Reset_sec = %b | real seg1_A = %b | real seg1_B = %b | real seg1_C = %b | real seg1_D = %b | real seg1_E = %b | real seg1_F = %b | real seg1_G = %b | real seg1_P = %b | real seg2_A = %b | real seg2_B = %b | real seg2_C = %b | real seg2_D = %b | real seg2_E = %b | real seg2_F = %b | real seg2_G = %b | real seg2_P = %b | real seg3_A = %b | real seg3_B = %b | real seg3_C = %b | real seg3_D = %b | real seg3_E = %b | real seg3_F = %b | real seg3_G = %b | real seg3_P = %b | ",Reset_sec_prev,seg1_A_prev,seg1_B_prev,seg1_C_prev,seg1_D_prev,seg1_E_prev,seg1_F_prev,seg1_G_prev,seg1_P_prev,seg2_A_prev,seg2_B_prev,seg2_C_prev,seg2_D_prev,seg2_E_prev,seg2_F_prev,seg2_G_prev,seg2_P_prev,seg3_A_prev,seg3_B_prev,seg3_C_prev,seg3_D_prev,seg3_E_prev,seg3_F_prev,seg3_G_prev,seg3_P_prev);
`endif
	if (
		( Reset_sec_expected_prev !== 1'bx ) && ( Reset_sec_prev !== Reset_sec_expected_prev )
		&& ((Reset_sec_expected_prev !== last_Reset_sec_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reset_sec :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reset_sec_expected_prev);
		$display ("     Real value = %b", Reset_sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Reset_sec_exp = Reset_sec_expected_prev;
	end
	if (
		( seg1_A_expected_prev !== 1'bx ) && ( seg1_A_prev !== seg1_A_expected_prev )
		&& ((seg1_A_expected_prev !== last_seg1_A_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1_A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_A_expected_prev);
		$display ("     Real value = %b", seg1_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg1_A_exp = seg1_A_expected_prev;
	end
	if (
		( seg1_B_expected_prev !== 1'bx ) && ( seg1_B_prev !== seg1_B_expected_prev )
		&& ((seg1_B_expected_prev !== last_seg1_B_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_B_expected_prev);
		$display ("     Real value = %b", seg1_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg1_B_exp = seg1_B_expected_prev;
	end
	if (
		( seg1_C_expected_prev !== 1'bx ) && ( seg1_C_prev !== seg1_C_expected_prev )
		&& ((seg1_C_expected_prev !== last_seg1_C_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1_C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_C_expected_prev);
		$display ("     Real value = %b", seg1_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_seg1_C_exp = seg1_C_expected_prev;
	end
	if (
		( seg1_D_expected_prev !== 1'bx ) && ( seg1_D_prev !== seg1_D_expected_prev )
		&& ((seg1_D_expected_prev !== last_seg1_D_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_D_expected_prev);
		$display ("     Real value = %b", seg1_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_seg1_D_exp = seg1_D_expected_prev;
	end
	if (
		( seg1_E_expected_prev !== 1'bx ) && ( seg1_E_prev !== seg1_E_expected_prev )
		&& ((seg1_E_expected_prev !== last_seg1_E_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1_E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_E_expected_prev);
		$display ("     Real value = %b", seg1_E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg1_E_exp = seg1_E_expected_prev;
	end
	if (
		( seg1_F_expected_prev !== 1'bx ) && ( seg1_F_prev !== seg1_F_expected_prev )
		&& ((seg1_F_expected_prev !== last_seg1_F_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1_F :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_F_expected_prev);
		$display ("     Real value = %b", seg1_F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_seg1_F_exp = seg1_F_expected_prev;
	end
	if (
		( seg1_G_expected_prev !== 1'bx ) && ( seg1_G_prev !== seg1_G_expected_prev )
		&& ((seg1_G_expected_prev !== last_seg1_G_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1_G :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_G_expected_prev);
		$display ("     Real value = %b", seg1_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_seg1_G_exp = seg1_G_expected_prev;
	end
	if (
		( seg1_P_expected_prev !== 1'bx ) && ( seg1_P_prev !== seg1_P_expected_prev )
		&& ((seg1_P_expected_prev !== last_seg1_P_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1_P :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_P_expected_prev);
		$display ("     Real value = %b", seg1_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_seg1_P_exp = seg1_P_expected_prev;
	end
	if (
		( seg2_A_expected_prev !== 1'bx ) && ( seg2_A_prev !== seg2_A_expected_prev )
		&& ((seg2_A_expected_prev !== last_seg2_A_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2_A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_A_expected_prev);
		$display ("     Real value = %b", seg2_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_seg2_A_exp = seg2_A_expected_prev;
	end
	if (
		( seg2_B_expected_prev !== 1'bx ) && ( seg2_B_prev !== seg2_B_expected_prev )
		&& ((seg2_B_expected_prev !== last_seg2_B_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_B_expected_prev);
		$display ("     Real value = %b", seg2_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_seg2_B_exp = seg2_B_expected_prev;
	end
	if (
		( seg2_C_expected_prev !== 1'bx ) && ( seg2_C_prev !== seg2_C_expected_prev )
		&& ((seg2_C_expected_prev !== last_seg2_C_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2_C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_C_expected_prev);
		$display ("     Real value = %b", seg2_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_seg2_C_exp = seg2_C_expected_prev;
	end
	if (
		( seg2_D_expected_prev !== 1'bx ) && ( seg2_D_prev !== seg2_D_expected_prev )
		&& ((seg2_D_expected_prev !== last_seg2_D_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_D_expected_prev);
		$display ("     Real value = %b", seg2_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_seg2_D_exp = seg2_D_expected_prev;
	end
	if (
		( seg2_E_expected_prev !== 1'bx ) && ( seg2_E_prev !== seg2_E_expected_prev )
		&& ((seg2_E_expected_prev !== last_seg2_E_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2_E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_E_expected_prev);
		$display ("     Real value = %b", seg2_E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_seg2_E_exp = seg2_E_expected_prev;
	end
	if (
		( seg2_F_expected_prev !== 1'bx ) && ( seg2_F_prev !== seg2_F_expected_prev )
		&& ((seg2_F_expected_prev !== last_seg2_F_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2_F :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_F_expected_prev);
		$display ("     Real value = %b", seg2_F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_seg2_F_exp = seg2_F_expected_prev;
	end
	if (
		( seg2_G_expected_prev !== 1'bx ) && ( seg2_G_prev !== seg2_G_expected_prev )
		&& ((seg2_G_expected_prev !== last_seg2_G_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2_G :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_G_expected_prev);
		$display ("     Real value = %b", seg2_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_seg2_G_exp = seg2_G_expected_prev;
	end
	if (
		( seg2_P_expected_prev !== 1'bx ) && ( seg2_P_prev !== seg2_P_expected_prev )
		&& ((seg2_P_expected_prev !== last_seg2_P_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2_P :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_P_expected_prev);
		$display ("     Real value = %b", seg2_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_seg2_P_exp = seg2_P_expected_prev;
	end
	if (
		( seg3_A_expected_prev !== 1'bx ) && ( seg3_A_prev !== seg3_A_expected_prev )
		&& ((seg3_A_expected_prev !== last_seg3_A_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3_A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_A_expected_prev);
		$display ("     Real value = %b", seg3_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_seg3_A_exp = seg3_A_expected_prev;
	end
	if (
		( seg3_B_expected_prev !== 1'bx ) && ( seg3_B_prev !== seg3_B_expected_prev )
		&& ((seg3_B_expected_prev !== last_seg3_B_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_B_expected_prev);
		$display ("     Real value = %b", seg3_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_seg3_B_exp = seg3_B_expected_prev;
	end
	if (
		( seg3_C_expected_prev !== 1'bx ) && ( seg3_C_prev !== seg3_C_expected_prev )
		&& ((seg3_C_expected_prev !== last_seg3_C_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3_C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_C_expected_prev);
		$display ("     Real value = %b", seg3_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_seg3_C_exp = seg3_C_expected_prev;
	end
	if (
		( seg3_D_expected_prev !== 1'bx ) && ( seg3_D_prev !== seg3_D_expected_prev )
		&& ((seg3_D_expected_prev !== last_seg3_D_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_D_expected_prev);
		$display ("     Real value = %b", seg3_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_seg3_D_exp = seg3_D_expected_prev;
	end
	if (
		( seg3_E_expected_prev !== 1'bx ) && ( seg3_E_prev !== seg3_E_expected_prev )
		&& ((seg3_E_expected_prev !== last_seg3_E_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3_E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_E_expected_prev);
		$display ("     Real value = %b", seg3_E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_seg3_E_exp = seg3_E_expected_prev;
	end
	if (
		( seg3_F_expected_prev !== 1'bx ) && ( seg3_F_prev !== seg3_F_expected_prev )
		&& ((seg3_F_expected_prev !== last_seg3_F_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3_F :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_F_expected_prev);
		$display ("     Real value = %b", seg3_F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_seg3_F_exp = seg3_F_expected_prev;
	end
	if (
		( seg3_G_expected_prev !== 1'bx ) && ( seg3_G_prev !== seg3_G_expected_prev )
		&& ((seg3_G_expected_prev !== last_seg3_G_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3_G :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_G_expected_prev);
		$display ("     Real value = %b", seg3_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_seg3_G_exp = seg3_G_expected_prev;
	end
	if (
		( seg3_P_expected_prev !== 1'bx ) && ( seg3_P_prev !== seg3_P_expected_prev )
		&& ((seg3_P_expected_prev !== last_seg3_P_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3_P :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_P_expected_prev);
		$display ("     Real value = %b", seg3_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_seg3_P_exp = seg3_P_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg Clk_Reset;
// wires                                               
wire Reset_sec;
wire seg1_A;
wire seg1_B;
wire seg1_C;
wire seg1_D;
wire seg1_E;
wire seg1_F;
wire seg1_G;
wire seg1_P;
wire seg2_A;
wire seg2_B;
wire seg2_C;
wire seg2_D;
wire seg2_E;
wire seg2_F;
wire seg2_G;
wire seg2_P;
wire seg3_A;
wire seg3_B;
wire seg3_C;
wire seg3_D;
wire seg3_E;
wire seg3_F;
wire seg3_G;
wire seg3_P;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.Clk_Reset(Clk_Reset),
	.Reset_sec(Reset_sec),
	.seg1_A(seg1_A),
	.seg1_B(seg1_B),
	.seg1_C(seg1_C),
	.seg1_D(seg1_D),
	.seg1_E(seg1_E),
	.seg1_F(seg1_F),
	.seg1_G(seg1_G),
	.seg1_P(seg1_P),
	.seg2_A(seg2_A),
	.seg2_B(seg2_B),
	.seg2_C(seg2_C),
	.seg2_D(seg2_D),
	.seg2_E(seg2_E),
	.seg2_F(seg2_F),
	.seg2_G(seg2_G),
	.seg2_P(seg2_P),
	.seg3_A(seg3_A),
	.seg3_B(seg3_B),
	.seg3_C(seg3_C),
	.seg3_D(seg3_D),
	.seg3_E(seg3_E),
	.seg3_F(seg3_F),
	.seg3_G(seg3_G),
	.seg3_P(seg3_P)
);

// clk
initial
begin
	repeat(33)
	begin
		clk = 1'b0;
		clk = #15000 1'b1;
		# 15000;
	end
	clk = 1'b0;
end 

// Clk_Reset
initial
begin
	Clk_Reset = 1'b1;
end 

main_vlg_sample_tst tb_sample (
	.clk(clk),
	.Clk_Reset(Clk_Reset),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.Reset_sec(Reset_sec),
	.seg1_A(seg1_A),
	.seg1_B(seg1_B),
	.seg1_C(seg1_C),
	.seg1_D(seg1_D),
	.seg1_E(seg1_E),
	.seg1_F(seg1_F),
	.seg1_G(seg1_G),
	.seg1_P(seg1_P),
	.seg2_A(seg2_A),
	.seg2_B(seg2_B),
	.seg2_C(seg2_C),
	.seg2_D(seg2_D),
	.seg2_E(seg2_E),
	.seg2_F(seg2_F),
	.seg2_G(seg2_G),
	.seg2_P(seg2_P),
	.seg3_A(seg3_A),
	.seg3_B(seg3_B),
	.seg3_C(seg3_C),
	.seg3_D(seg3_D),
	.seg3_E(seg3_E),
	.seg3_F(seg3_F),
	.seg3_G(seg3_G),
	.seg3_P(seg3_P),
	.sampler_rx(sampler)
);
endmodule

